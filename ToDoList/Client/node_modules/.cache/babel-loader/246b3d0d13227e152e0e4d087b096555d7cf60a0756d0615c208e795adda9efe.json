{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { tasksAPI } from '../../services/api';\nexport const fetchMessagesForTask = createAsyncThunk('messages/fetchMessagesForTask', async (taskId, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await tasksAPI.getMessagesForTask(taskId);\n    return {\n      taskId,\n      messages: response.data\n    };\n  } catch (error) {\n    var _error$response;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || 'Failed to fetch messages');\n  }\n});\nexport const addMessageToTask = createAsyncThunk('messages/addMessageToTask', async ({\n  taskId,\n  messageContent\n}, {\n  rejectWithValue\n}) => {\n  try {\n    await tasksAPI.addMessageToTask(taskId, messageContent);\n    return {\n      taskId,\n      message: {\n        content: messageContent,\n        createdAt: new Date().toISOString()\n      }\n    };\n  } catch (error) {\n    var _error$response2;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || 'Failed to add message');\n  }\n});\nconst initialState = {\n  messages: {},\n  loading: false,\n  error: null\n};\nconst messageSlice = createSlice({\n  name: 'messages',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    clearMessages: state => {\n      state.messages = {};\n    },\n    clearMessagesForTask: (state, action) => {\n      delete state.messages[action.payload];\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Fetch Messages for Task\n    .addCase(fetchMessagesForTask.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(fetchMessagesForTask.fulfilled, (state, action) => {\n      state.loading = false;\n      const {\n        taskId,\n        messages\n      } = action.payload;\n      state.messages[taskId] = messages;\n      state.error = null;\n    }).addCase(fetchMessagesForTask.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Add Message to Task\n    .addCase(addMessageToTask.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(addMessageToTask.fulfilled, (state, action) => {\n      state.loading = false;\n      const {\n        taskId,\n        message\n      } = action.payload;\n      if (!state.messages[taskId]) {\n        state.messages[taskId] = [];\n      }\n      state.messages[taskId].push(message);\n      state.error = null;\n    }).addCase(addMessageToTask.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    });\n  }\n});\nexport const {\n  clearError,\n  clearMessages,\n  clearMessagesForTask\n} = messageSlice.actions;\nexport const selectMessagesForTask = (state, taskId) => state.messages.messages[taskId] || [];\nexport const selectMessagesLoading = state => state.messages.loading;\nexport const selectMessagesError = state => state.messages.error;\nexport default messageSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","tasksAPI","fetchMessagesForTask","taskId","rejectWithValue","response","getMessagesForTask","messages","data","error","_error$response","addMessageToTask","messageContent","message","content","createdAt","Date","toISOString","_error$response2","initialState","loading","messageSlice","name","reducers","clearError","state","clearMessages","clearMessagesForTask","action","payload","extraReducers","builder","addCase","pending","fulfilled","rejected","push","actions","selectMessagesForTask","selectMessagesLoading","selectMessagesError","reducer"],"sources":["C:/Users/llick/OneDrive/Belgeler/TODOLIST/ToDoList/Client/src/store/slices/messageSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { tasksAPI } from '../../services/api';\r\n\r\nexport const fetchMessagesForTask = createAsyncThunk(\r\n  'messages/fetchMessagesForTask',\r\n  async (taskId, { rejectWithValue }) => {\r\n    try {\r\n      const response = await tasksAPI.getMessagesForTask(taskId);\r\n      return { taskId, messages: response.data };\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data || 'Failed to fetch messages');\r\n    }\r\n  }\r\n);\r\n\r\nexport const addMessageToTask = createAsyncThunk(\r\n  'messages/addMessageToTask',\r\n  async ({ taskId, messageContent }, { rejectWithValue }) => {\r\n    try {\r\n      await tasksAPI.addMessageToTask(taskId, messageContent);\r\n      return {\r\n        taskId,\r\n        message: {\r\n          content: messageContent,\r\n          createdAt: new Date().toISOString(),\r\n        }\r\n      };\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data || 'Failed to add message');\r\n    }\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  messages: {},\r\n  loading: false,\r\n  error: null\r\n};\r\n\r\nconst messageSlice = createSlice({\r\n  name: 'messages',\r\n  initialState,\r\n  reducers: {\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    clearMessages: (state) => {\r\n      state.messages = {};\r\n    },\r\n    clearMessagesForTask: (state, action) => {\r\n      delete state.messages[action.payload];\r\n    }\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Fetch Messages for Task\r\n      .addCase(fetchMessagesForTask.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchMessagesForTask.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        const { taskId, messages } = action.payload;\r\n        state.messages[taskId] = messages;\r\n        state.error = null;\r\n      })\r\n      .addCase(fetchMessagesForTask.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Add Message to Task\r\n      .addCase(addMessageToTask.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(addMessageToTask.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        const { taskId, message } = action.payload;\r\n        if (!state.messages[taskId]) {\r\n          state.messages[taskId] = [];\r\n        }\r\n        state.messages[taskId].push(message);\r\n        state.error = null;\r\n      })\r\n      .addCase(addMessageToTask.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clearError, clearMessages, clearMessagesForTask } = messageSlice.actions;\r\n\r\nexport const selectMessagesForTask = (state, taskId) => state.messages.messages[taskId] || [];\r\nexport const selectMessagesLoading = (state) => state.messages.loading;\r\nexport const selectMessagesError = (state) => state.messages.error;\r\n\r\nexport default messageSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}