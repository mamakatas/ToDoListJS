{"ast":null,"code":"import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\nimport { authAPI } from '../../services/api';\nimport jwt_decode from 'jwt-decode';\n\n// Async thunks\nexport const loginUser = createAsyncThunk('auth/loginUser', async (credentials, {\n  rejectWithValue\n}) => {\n  try {\n    const response = await authAPI.login(credentials);\n    const {\n      token\n    } = response.data;\n\n    // Store token in localStorage\n    localStorage.setItem('token', token);\n\n    // Decode token to get role\n    const decoded = jwt_decode(token);\n    const role = decoded['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || decoded.role;\n\n    // Get user info\n    const userInfo = {\n      username: credentials.userName,\n      token: token,\n      role: role\n    };\n    localStorage.setItem('user', JSON.stringify(userInfo));\n    return userInfo;\n  } catch (error) {\n    var _error$response;\n    return rejectWithValue(((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.data) || 'Login failed');\n  }\n});\nexport const registerUser = createAsyncThunk('auth/registerUser', async (userData, {\n  rejectWithValue\n}) => {\n  try {\n    await authAPI.register(userData);\n    return {\n      message: 'Registration successful'\n    };\n  } catch (error) {\n    var _error$response2;\n    return rejectWithValue(((_error$response2 = error.response) === null || _error$response2 === void 0 ? void 0 : _error$response2.data) || 'Registration failed');\n  }\n});\nexport const changePassword = createAsyncThunk('auth/changePassword', async (passwordData, {\n  rejectWithValue\n}) => {\n  try {\n    await authAPI.changePassword(passwordData);\n    return {\n      message: 'Password changed successfully'\n    };\n  } catch (error) {\n    var _error$response3;\n    return rejectWithValue(((_error$response3 = error.response) === null || _error$response3 === void 0 ? void 0 : _error$response3.data) || 'Password change failed');\n  }\n});\nexport const logoutUser = createAsyncThunk('auth/logoutUser', async () => {\n  localStorage.removeItem('token');\n  localStorage.removeItem('user');\n  return null;\n});\n\n// Check if user is already logged in\nexport const checkAuthStatus = createAsyncThunk('auth/checkAuthStatus', async () => {\n  const token = localStorage.getItem('token');\n  const userData = localStorage.getItem('user');\n  if (token && userData) {\n    try {\n      const user = JSON.parse(userData);\n      // Decode token to get role\n      const decoded = jwt_decode(token);\n      const role = decoded['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || decoded.role;\n      user.role = role; // Add role to the user object\n      return user;\n    } catch (error) {\n      localStorage.removeItem('token');\n      localStorage.removeItem('user');\n      throw new Error('Invalid user data');\n    }\n  }\n  throw new Error('No authentication data');\n});\nconst initialState = {\n  user: null,\n  token: null,\n  isAuthenticated: false,\n  loading: false,\n  error: null,\n  message: null\n};\nconst authSlice = createSlice({\n  name: 'auth',\n  initialState,\n  reducers: {\n    clearError: state => {\n      state.error = null;\n    },\n    clearMessage: state => {\n      state.message = null;\n    }\n  },\n  extraReducers: builder => {\n    builder\n    // Login\n    .addCase(loginUser.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(loginUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n      state.token = action.payload.token;\n      state.isAuthenticated = true;\n      state.error = null;\n    }).addCase(loginUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n      state.isAuthenticated = false;\n    })\n\n    // Register\n    .addCase(registerUser.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(registerUser.fulfilled, (state, action) => {\n      state.loading = false;\n      state.message = action.payload.message;\n      state.error = null;\n    }).addCase(registerUser.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Change Password\n    .addCase(changePassword.pending, state => {\n      state.loading = true;\n      state.error = null;\n    }).addCase(changePassword.fulfilled, (state, action) => {\n      state.loading = false;\n      state.message = action.payload.message;\n      state.error = null;\n    }).addCase(changePassword.rejected, (state, action) => {\n      state.loading = false;\n      state.error = action.payload;\n    })\n\n    // Logout\n    .addCase(logoutUser.fulfilled, state => {\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n      state.error = null;\n      state.message = null;\n    })\n\n    // Check Auth Status\n    .addCase(checkAuthStatus.pending, state => {\n      state.loading = true;\n    }).addCase(checkAuthStatus.fulfilled, (state, action) => {\n      state.loading = false;\n      state.user = action.payload;\n      state.token = action.payload.token;\n      state.isAuthenticated = true;\n      state.error = null;\n    }).addCase(checkAuthStatus.rejected, state => {\n      state.loading = false;\n      state.user = null;\n      state.token = null;\n      state.isAuthenticated = false;\n    });\n  }\n});\nexport const {\n  clearError,\n  clearMessage\n} = authSlice.actions;\nexport default authSlice.reducer;","map":{"version":3,"names":["createSlice","createAsyncThunk","authAPI","jwt_decode","loginUser","credentials","rejectWithValue","response","login","token","data","localStorage","setItem","decoded","role","userInfo","username","userName","JSON","stringify","error","_error$response","registerUser","userData","register","message","_error$response2","changePassword","passwordData","_error$response3","logoutUser","removeItem","checkAuthStatus","getItem","user","parse","Error","initialState","isAuthenticated","loading","authSlice","name","reducers","clearError","state","clearMessage","extraReducers","builder","addCase","pending","fulfilled","action","payload","rejected","actions","reducer"],"sources":["C:/Users/llick/OneDrive/Belgeler/TODOLIST/ToDoList/Client/src/store/slices/authSlice.js"],"sourcesContent":["import { createSlice, createAsyncThunk } from '@reduxjs/toolkit';\r\nimport { authAPI } from '../../services/api';\r\nimport jwt_decode from 'jwt-decode';\r\n\r\n// Async thunks\r\nexport const loginUser = createAsyncThunk(\r\n  'auth/loginUser',\r\n  async (credentials, { rejectWithValue }) => {\r\n    try {\r\n      const response = await authAPI.login(credentials);\r\n      const { token } = response.data;\r\n      \r\n      // Store token in localStorage\r\n      localStorage.setItem('token', token);\r\n      \r\n      // Decode token to get role\r\n      const decoded = jwt_decode(token);\r\n      const role = decoded['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || decoded.role;\r\n      \r\n      // Get user info\r\n      const userInfo = {\r\n        username: credentials.userName,\r\n        token: token,\r\n        role: role\r\n      };\r\n      \r\n      localStorage.setItem('user', JSON.stringify(userInfo));\r\n      return userInfo;\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data || 'Login failed');\r\n    }\r\n  }\r\n);\r\n\r\nexport const registerUser = createAsyncThunk(\r\n  'auth/registerUser',\r\n  async (userData, { rejectWithValue }) => {\r\n    try {\r\n      await authAPI.register(userData);\r\n      return { message: 'Registration successful' };\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data || 'Registration failed');\r\n    }\r\n  }\r\n);\r\n\r\nexport const changePassword = createAsyncThunk(\r\n  'auth/changePassword',\r\n  async (passwordData, { rejectWithValue }) => {\r\n    try {\r\n      await authAPI.changePassword(passwordData);\r\n      return { message: 'Password changed successfully' };\r\n    } catch (error) {\r\n      return rejectWithValue(error.response?.data || 'Password change failed');\r\n    }\r\n  }\r\n);\r\n\r\nexport const logoutUser = createAsyncThunk(\r\n  'auth/logoutUser',\r\n  async () => {\r\n    localStorage.removeItem('token');\r\n    localStorage.removeItem('user');\r\n    return null;\r\n  }\r\n);\r\n\r\n// Check if user is already logged in\r\nexport const checkAuthStatus = createAsyncThunk(\r\n  'auth/checkAuthStatus',\r\n  async () => {\r\n    const token = localStorage.getItem('token');\r\n    const userData = localStorage.getItem('user');\r\n    \r\n    if (token && userData) {\r\n      try {\r\n        const user = JSON.parse(userData);\r\n        // Decode token to get role\r\n        const decoded = jwt_decode(token);\r\n        const role = decoded['http://schemas.microsoft.com/ws/2008/06/identity/claims/role'] || decoded.role;\r\n        user.role = role; // Add role to the user object\r\n        return user;\r\n      } catch (error) {\r\n        localStorage.removeItem('token');\r\n        localStorage.removeItem('user');\r\n        throw new Error('Invalid user data');\r\n      }\r\n    }\r\n    throw new Error('No authentication data');\r\n  }\r\n);\r\n\r\nconst initialState = {\r\n  user: null,\r\n  token: null,\r\n  isAuthenticated: false,\r\n  loading: false,\r\n  error: null,\r\n  message: null\r\n};\r\n\r\nconst authSlice = createSlice({\r\n  name: 'auth',\r\n  initialState,\r\n  reducers: {\r\n    clearError: (state) => {\r\n      state.error = null;\r\n    },\r\n    clearMessage: (state) => {\r\n      state.message = null;\r\n    },\r\n  },\r\n  extraReducers: (builder) => {\r\n    builder\r\n      // Login\r\n      .addCase(loginUser.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n        state.token = action.payload.token;\r\n        state.isAuthenticated = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(loginUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n        state.isAuthenticated = false;\r\n      })\r\n      \r\n      // Register\r\n      .addCase(registerUser.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(registerUser.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.message = action.payload.message;\r\n        state.error = null;\r\n      })\r\n      .addCase(registerUser.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Change Password\r\n      .addCase(changePassword.pending, (state) => {\r\n        state.loading = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(changePassword.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.message = action.payload.message;\r\n        state.error = null;\r\n      })\r\n      .addCase(changePassword.rejected, (state, action) => {\r\n        state.loading = false;\r\n        state.error = action.payload;\r\n      })\r\n      \r\n      // Logout\r\n      .addCase(logoutUser.fulfilled, (state) => {\r\n        state.user = null;\r\n        state.token = null;\r\n        state.isAuthenticated = false;\r\n        state.error = null;\r\n        state.message = null;\r\n      })\r\n      \r\n      // Check Auth Status\r\n      .addCase(checkAuthStatus.pending, (state) => {\r\n        state.loading = true;\r\n      })\r\n      .addCase(checkAuthStatus.fulfilled, (state, action) => {\r\n        state.loading = false;\r\n        state.user = action.payload;\r\n        state.token = action.payload.token;\r\n        state.isAuthenticated = true;\r\n        state.error = null;\r\n      })\r\n      .addCase(checkAuthStatus.rejected, (state) => {\r\n        state.loading = false;\r\n        state.user = null;\r\n        state.token = null;\r\n        state.isAuthenticated = false;\r\n      });\r\n  },\r\n});\r\n\r\nexport const { clearError, clearMessage } = authSlice.actions;\r\nexport default authSlice.reducer; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}